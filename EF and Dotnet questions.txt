Question 1: Handle null reference exception when return type is IEnumerable

Return type: IEnumerable<Employee>
public IEnumerable<Employee> GetEmployeeAsync(string eName)
{
	
	if(string.IsNullOrEmpty(eName))
        {
	   return null;
	}
        
        /*
	   If eName is not null then get the records and send Employee details
	*/
}

In UI, If user pass null or empty to eName then issue occurs at this line: empObject.Count()

Solution:
To avoid this and works without issues,

return Enumerable.Empty<Employee>();
--------------------------------------------------------------------------------------------------------

Question 2: User-Unhandled - System.ArgumentNullReferenceException: "Value cannot be null. (Parameter: 'entity')

Issue: Delete a record from a table using following code but again you pass same id to delete.
When you try this you get this error.

var employee = db.Employee.FirstOrDefault(x=>x.id)
db.Employees.Remove(employee); // Issue comes at this place
db.SaveChanges();
return view(nameof(Index)); // Redirect to index page

Solution:

var employee = db.Employee.FirstOrDefault(x=>x.id)
if(employee != null)
{
   db.Employees.Remove(employee);
   db.SaveChanges();
}
return view(nameof(Index)); // Redirect to index page
--------------------------------------------------------------------------------------------------------
Question 3: How do we refactor the following code and what probelm it solves after refactor?

Program Snippet:
public class MailService
{
   private SmtpService smtpClient;
   public void SendMail(string receipents, string subject, string requestBody)
   {
	var client = new SmtpClient("smtp.example.com");
        client.Send(new MailMessage("<from>",receipents, subject, requestBody));
   }
}

Refactored:
public class MailService
{
   private SmtpService smtpClient;
   public void SendMail(string receipents, string subject, string requestBody)
   {
	using (var client = new SmtpClient("smtp.example.com"))
        {
	   client.Send(new MailMessage("<from>",receipents, subject, requestBody));
	}
   }
}

with 'using' after send email the object of SmtpClient dispose automatically.
--------------------------------------------------------------------------------------------------------
Question 4: Optmize and refactor the following query

var departments= dbContext.Departments.ToList();
foreach(var dept in departments)
{
    if(dept.Name == "IT")
    {
	emp.DeptName = dbContext.Employees.FirstorDefault(x=>x.DeptIdd == dept.Id);
    }
}

Consider in dept table we have 20 records
In that Name == "IT" have 5 records
So = 1 main query + 5 sub queries = 6 times

Question: How many times the department query and other queries executes?
Is there any way to optimize this?

var departments= dbContext.Departments.ToList();
// This approach might help if data is less to keep it in memory
var empDetails = dbContext.Employees.ToList();
foreach(var dept in departments)
{
    if(dept.Name == "IT")
    {
	emp.DeptName = empDetails.FirstorDefault(x=>x.DeptIdd == dept.Id);
    }
}

To further improve from 2 queries to 1 query
var listOfEmployees = dbContext.Departments.Include(e=>e.Employees).ToList();
Note: Adjust the foreach
--------------------------------------------------------------------------------------------------------
Question 5: I want to update the record insted it creates a new entry. What could be the reason?

Model:
public class EmployeeDto {
  public int Id {get; set;}
  public string Name {get; set;}
}

In Api,
[HttpPost]
public async Task UpdateEmployeeAsync(EmployeeDto empDto)
{
   // Assume we inject DB Context at Constructor
   _db.Employees.Update(empDto); // This statement our expectation is to update but it's insert
   _db.SaveChangesAsync();
}

Give me what is the reason behind here?
Solution: In EmpDto, if you are not passing Id then EF Core treats this record as new entry and created it.

To avoid
In Api,
[HttpPost]
public async Task UpdateEmployeeAsync(EmployeeDto empDto)
{
   // Assume we inject DB Context at Constructor
   if(empDto is not null && empDto.Id > 0){
      _db.Employees.Update(empDto); // This statement our expectation is to update but it's insert
      _db.SaveChangesAsync();
   }
}
--------------------------------------------------------------------------------------------------------
Question 6: Refactor the following statement in simpler and better way.
Input:
var name = "nani";
var desig ="lead";
var org = "kanini";
var greetings = string.Format("Welcome {0}, Happy to announce you are {1} associate in {2} organization", name, desig, org);

Refactored solution:
var greetings = $"Welcome {name}, Happy to announce you are {desig} associate in {org} organization";
This simplifies the line and prevent error from mis-indexing.
--------------------------------------------------------------------------------------------------------
Question 7: What problems we get when we use == over is operator ?

Input:

if(empDetails == null) vs if(empDetails is null)

Problem with == is we can override operator and write our custom logic
but with 'is' operator we cannot do that

Preferable solution is use "is null" instead of "=="
Both operates serve the same functionality.
--------------------------------------------------------------------------------------------------------
Question 8: Find what is the wrong in this linq query

Expected output: Fetch 2 records

Linq Query: var empDetails = dbContext.EmpDetails
			     .Include(d=>d.Departments)
                             .OrderBy(e=>e.Id)
			     .ToList()
			     .Take(2);
What is the output of Sql query and how many results this query gives?

Answer: It doesn't consider the Take(2) itself
Linq Query: var empDetails = dbContext.EmpDetails
			     .Include(d=>d.Departments)
                             .OrderBy(e=>e.Id)
			     .Take(2)
			     .ToList();
This updated query gives 2 empdetails including departments.
--------------------------------------------------------------------------------------------------------
Question 9: Refactor the following query into simpler way
Query: dbContext.Employees.Where(x=>x.Name.ToLower().Contains('sree').FirstOrDefaultAsync();

Simpler way: dbContext.Employees.FirstOrDefaultAsync(x=>x.Name.ToLower().Contains('sree');
--------------------------------------------------------------------------------------------------------
Question 10: In new EF Core project, after i execute we were able to see the records but i would like to know what is the query behind. How to configure this?

Answer:
UseSqlServer("<YourConnectionString>")
.LogTo(Console.WriteLine);

But we get lot of information in console but i want only commands
UseSqlServer("")
.LogTo(Console.WriteLine, new[] {DBLoggerCategory.Database.Command.Name});

With this updated statement we see some less info in console but still i see debug, info many things
UseSqlServer("")
.LogTo(Console.WriteLine, new[] {DBLoggerCategory.Database.Command.Name}, LogLevel.Information);
--------------------------------------------------------------------------------------------------------
Question 11: How to get first record from a table?
If table doesn't have any records then to handle the exception without throwing an error.

Input: TableName: Employee

Answer:
var empData = dbContext.Employee.First();
Throws: Sequence contains no elements error and it goes to catch

var empData = dbContext.Employee.FirstOrDefault();
This statement gives null by default if no record so we can handle it in directly it doesn't throw to catch.
--------------------------------------------------------------------------------------------------------
Question 12: Do you see any changes in sql query when we use First() or FirstOrDefault()?

Answer: No, Both queries generates same sql query. Main difference is handling exception.
--------------------------------------------------------------------------------------------------------
Question 13: If i execute the following linq query i am getting following sql query
Linq Query: dbContext.Employee.Where(x=>x.Name == null);
Sql query : Select * from EMployee where 0 == 1
Reason behind this:
property of Name either
public string Name {get; set;}

or

public string Name {get; set;} = string.Empty;

To fix this issue

public string? Name {get; set;}
--------------------------------------------------------------------------------------------------------
Question 13: Please find what is the output of the following query?
var empObject = dbContext.Employee.Find(10);

Answer: Get employeeDetails for 10 Id
Note: Find works only on Primary key of the column
--------------------------------------------------------------------------------------------------------
Question 14: Does the following query generates a sql query?
var empObject = dbContext.Employee.Find(10);

Ans: No
--------------------------------------------------------------------------------------------------------
Question 15: When do we go for Single() over First()?
If you know by default you get always one record then you go with Single()
But issue with Single() is if your query contains more than one value returning then you get
"Sequence contains more than one value" error.
If you are not sure then go for First() irrespective of how many records query returns it takes only one.
--------------------------------------------------------------------------------------------------------
Question 16: Which query is the example for Deferred Execution?

Query 1: var empDetails = dbContext.Employee;
         foreach(var emp in empDetails)
         {
         }

Query 2: var empDetailsList = dbContext.Employee.ToList();
	 foreach(var emp in empDetailsList)
         {
         }

Answer: Query 1
Reason: Query execution actually happend in foreach
Where as Query 2 execution happend at ToList()
--------------------------------------------------------------------------------------------------------
Question 17: Pagination using EFCore

Skip(NumberofrecordsToSkip)
Take(NumberofrecordstoFetch)

Ex: For page 1 get 30 records
dbContext.Employee.Skip(0).Take(30);

For page 2 get next 30 records
dbContext.Employee.Skip(30).Take(30);
--------------------------------------------------------------------------------------------------------
Question 18: How to set primary key column in Model entity class?

Input:

public class Employee {

   public int Id {get; set;}
   public string Fname {get; set;}
   public string Lname {get; set;}
}

If you apply migration to this model what will be the output?

Answer: No issues and migration success because in EF if you give Id it treats that column as a primary key.

public class Employee {

   public int EmployeeId {get; set;}
   public string Fname {get; set;}
   public string Lname {get; set;}
}

If you apply migration to this model what will be the output?

Answer: No issues and migration success because in EF if you give <ClassName>Id it treats that column as a primary key.

public class Employee {

   public int IdEmployee {get; set;}
   public string Fname {get; set;}
   public string Lname {get; set;}
}

Answer: The Entity type 'Employee' requires a primary key to be defined. If you intended to use a keyless entity type then call 'HasNoKey' in 'OnModelCreating'.

Answer: Now explicity set 
public class Employee {

   [Key]
   public int IdEmployee {get; set;}
   public string Fname {get; set;}
   public string Lname {get; set;}
}
--------------------------------------------------------------------------------------------------------
Question 19: What are the commands involved when we apply migration?

Answer:
Add-Migration <MigrationName>
 - This creates a migration class which contains two override methods
   - Up => Contains all the code needs to execute
   - Down => Contains all the code to revert if in case any issues while performing update into database.
Remove-Migration
 - This removes current migration
Update-DataBase
 - Applies the current migration into database
--------------------------------------------------------------------------------------------------------